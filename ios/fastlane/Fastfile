default_platform(:ios)

def map_match_type()
  case ENV["BUILD_TYPE"]
  when "test"
    return "development"
  when "beta", "release"
    return "appstore"
  end
end

def map_export_options()
  case ENV["BUILD_TYPE"]
  when "test"
    return "DevExportOptions"
  when "beta", "release"
    return "ProdExportOptions"
  end
end

before_all do
  ENV["SLACK_URL"] = ENV["IOS_SLACK_URL"]
end

desc "Build signed Flutter IPA"
lane :build do
  Dir.chdir "../.." do
    sh("flutter pub get")
  end
  Dir.chdir ".." do
    sh("pod repo update")
  end
  match(
    type: map_match_type,
    readonly: true
  )
  Dir.chdir "../.." do
    sh("flutter build ipa --export-options-plist ios/ExportOptions/#{map_export_options}.plist lib/#{ENV["BUILD_TYPE"]}.dart")
  end
end

desc "Submit a new build to Firebase App Distribution"
lane :publish_to_firebase do
  firebase_app_distribution(
    ipa_path: "../#{ENV["IOS_IPA_PATH"]}",
    app: ENV["IOS_FIREBASE_APP_ID"],
    groups: "internalTesters",
    release_notes: "Git Branch: #{ENV["CI_COMMIT_REF_NAME"]} \nGit Commit: #{ENV["CI_COMMIT_MESSAGE"]}"
  )
  slack(
    message: ":rocket: Firebase App Distribution: #{ENV["VERSION"]}",
    success: true
  )
end

desc "Submit a new release to App Store"
lane :publish_to_app_store do
  api_key = app_store_connect_api_key(
    key_id: ENV["IOS_KEY_ID"],
    issuer_id: ENV["IOS_ISSUER_ID"],
    key_filepath: ENV["IOS_KEY_FILE_PATH"],
  )
  upload_to_app_store(
    api_key: api_key,
    ipa: "../#{ENV["IOS_IPA_PATH"]}",
    skip_screenshots: true,
    skip_metadata: true,
    skip_app_version_update: true,
    submit_for_review: false,
    run_precheck_before_submit: false,
    precheck_include_in_app_purchases: false
  )
  slack(
    message: ":rocket: App Store: #{ENV["VERSION"]}",
    success: true
  )
end

error do |lane, exception|
  slack(
    message: exception.message,
    success: false
  )
end
